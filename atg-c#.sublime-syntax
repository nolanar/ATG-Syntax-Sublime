%YAML 1.2
---
name: ATG C#
file_extensions:
  - atg
scope: source.atg
contexts:
  main:
    - include: section_compiler
    - include: section_comments_ignore
    - include: section_end
    - include: comments
    - include: sections
    - include: rule
    
  rule:
    - match: '\b[[:alpha:]][\w]+\b'
      scope: entity.name.rule.atg
      push:
        - include: lang
        - include: keywords
        - include: strings
        - meta_scope: meta.rule.body.atg
        - match: '(?<!\.)\.(?!\.)'
          pop: true

  section_compiler:
    - match: '(\bCOMPILER\b)\s*(\b[[:alpha:]][\w]+\b)'
      captures:
        1: storage.modifier.atg
        2: entity.name.rule.atg
      push: Packages/C#/C#.sublime-syntax
      with_prototype:
        - match: '\b(IGNORECASE|CHARACTERS|TOKENS|COMMENTS|IGNORE|PRAGMAS|PRODUCTIONS)\b'
          scope: storage.modifier.atg
          pop: true

  section_comments_ignore:
    - match: '\b(COMMENTS|IGNORE)\b'
      scope: storage.modifier.atg
      push:
        - include: keywords
        - include: comments
        - include: strings
        - match: '\b(PRAGMAS|PRODUCTIONS)\b'
          scope: storage.modifier.atg
          pop: true
        - include: sections

  section_end:
    - match: '(\b(END)\b)\s*(\b[[:alpha:]][\w]+\b)'
      captures:
        1: storage.modifier.atg


  lang:
    - match: '\(\.'
      scope: punctuation.section.block.begin.atg
      push: Packages/C#/C#.sublime-syntax
      with_prototype:
        - match: '\.\)'
          scope: punctuation.section.block.end.atg
          pop: true
    - match: '<'
      push: Packages/C#/C#.sublime-syntax
      with_prototype:
        - match: '>'
          scope: punctuation.section.block.end.atg
          pop: true

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.atg
      push:
        - meta_scope: string.quoted.double.atg
        - match: '"'
          scope: punctuation.definition.string.end.atg
          pop: true
        - match: \\.
          scope: constant.character.escape.atg
    - match: "'"
      scope: punctuation.definition.string.begin.atg
      push:
        - meta_scope: string.quoted.single.atg
        - match: "'"
          scope: punctuation.definition.string.end.atg
          pop: true
        - match: \\.
          scope: constant.character.escape.atg

  comments:
    - match: '\/\*'
      scope: puctuation.definition.comment.atg
      push:
        - meta_scope: comment.block.atg
        - match: '\*\/'
          scope: punctuation.definition.comment.atg
          pop: true
    - match: '\/\/'
      scope: puctuation.definition.comment.atg
      push:
        - meta_scope: comment.line.atg
        - match: $\n?
          pop: true

  keywords:
    - match: '\b(using|ANY|CONTEXT|END|WEAK|FROM|NESTED|SYNC|IF|out|TO|)\b'
      scope: keyword.control.atg
    - match: '\+|-'
      scope: keyword.operator.set.atg
    - match: '\.\.'
      scope: keyword.operator.range.atg
    - match: '[\{\}\(\)\|\[\]]'
      scope: keyword.operator.atg

  punctuations:
    - match: '='
      scope: punctuation.separator.atg
    - match: '\.'
      scope: punctuation.terminator.atg

  sections:
    - match: '\b(IGNORE|COMMENTS|PRAGMAS|TOKENS|CHARACTERS|PRODUCTIONS|IGNORECASE|COMPILER)\b'
      scope: storage.modifier.atg