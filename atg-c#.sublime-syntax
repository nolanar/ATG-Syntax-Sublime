%YAML 1.2
---
name: ATG C#
file_extensions:
  - atg
scope: source.atg
contexts:
  main:
    - include: imports
    - include: comments
    - include: section_compiler
    - include: section_ignorecase
    - include: section_rules
    - include: section_comments_ignore
    - include: section_end

  section_compiler:
    - match: '(\bCOMPILER\b)\s*(\b[[:alpha:]][\w]+\b)'
      captures:
        1: storage.modifier.atg
        2: entity.name.rule.atg
      push:
      - meta_scope: meta.globals.atg
      - include: "Packages/C#/C#.sublime-syntax#method"
      - include: "Packages/C#/C#.sublime-syntax#code"
      with_prototype:
        - match: '(?=\b(COMPILER|IGNORECASE|CHARACTERS|TOKENS|COMMENTS|IGNORE|PRAGMAS|PRODUCTIONS|END)\b)'
          pop: true

  section_ignorecase:
    - match: '\bIGNORECASE\b'
      scope: storage.modifier.atg

  section_rules:
    - match: '\b(CHARACTERS|TOKENS|PRAGMAS|PRODUCTIONS)\b'
      scope: storage.modifier.atg
      push:
        - match: '(?=\b(COMPILER|IGNORECASE|CHARACTERS|TOKENS|COMMENTS|IGNORE|PRAGMAS|PRODUCTIONS|END)\b)'
          pop: true
        - include: rule
        - include: comments
        - include: strings

  section_comments_ignore:
    - match: '\b(COMMENTS|IGNORE)\b'
      scope: storage.modifier.atg
      push:
        - match: '(?=\b(COMPILER|IGNORECASE|CHARACTERS|TOKENS|COMMENTS|IGNORE|PRAGMAS|PRODUCTIONS|END)\b)'
          pop: true
        - include: keywords
        - include: comments
        - include: strings

  section_end:
    - match: '\bEND\b'
      scope : storage.modifier.atg
      push:
        - match: '(?<!\.)\.(?!\.)'
          scope: punctuation.terminator.atg
          pop: true

  rule:
    - match: '\b[[:alpha:]][\w]+\b'
      scope: entity.name.rule.atg
      push:
      - meta_scope: meta.rule.atg
      - match: '(?<!\.)\.(?!\.)'
        scope: punctuation.section.rule.end.atg
        pop: true
      - include: comments
      - include: parameters
      - include: semantics
      - match: '='
        scope: punctuation.section.rule.begin.atg
        push:
        - meta_scope: meta.rule.body.atg
        - match: '(?=(?<!\.)\.(?!\.))'
          scope: punctuation.section.rule.end.atg
          pop: true
        - include: comments
        - include: semantics
        - include: keywords
        - include: strings

  semantics:
    - match: '\(\.'
      scope: punctuation.section.semantic.begin.atg
      push: 
      - include: "Packages/C#/C#.sublime-syntax#code"
      with_prototype:
        - match: '\.\)'
          scope: punctuation.section.semantic.end.atg
          pop: true
    - match: '<'
      scope: punctuation.section.arguments.begin.atg
      push: 
      - include: "Packages/C#/C#.sublime-syntax#code"
      with_prototype:
        - match: '>'
          scope: punctuation.section.arguments.end.atg
          pop: true
    - match: '\b(IF)\b\s*\('
      captures:
        1: keyword.control.atg
      push: 
      - include: "Packages/C#/C#.sublime-syntax#code"
      with_prototype:
        - match: '\)'
          pop: true

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.atg
      push:
        - meta_scope: string.quoted.double.atg
        - match: '"'
          scope: punctuation.definition.string.end.atg
          pop: true
        - match: \\.
          scope: constant.character.escape.atg
    - match: "'"
      scope: punctuation.definition.string.begin.atg
      push:
        - meta_scope: string.quoted.single.atg
        - match: "'"
          scope: punctuation.definition.string.end.atg
          pop: true
        - match: \\.
          scope: constant.character.escape.atg

  comments:
    - match: '\/\*'
      scope: puctuation.definition.comment.atg
      push:
        - meta_scope: comment.block.atg
        - match: '\*\/'
          scope: punctuation.definition.comment.atg
          pop: true
    - match: '\/\/'
      scope: puctuation.definition.comment.atg
      push:
        - meta_scope: comment.line.atg
        - match: $\n?
          pop: true

  keywords:
    - match: '\bANY\b'
      scope: constant.semanticsuage.atg
    - match: '\b(CONTEXT|WEAK|FROM|NESTED|SYNC|IF|TO|)\b'
      scope: keyword.control.atg
    - match: '\+|-'
      scope: keyword.operator.set.atg
    - match: '\.\.'
      scope: keyword.operator.range.atg
    - match: '[\{\}\(\)\|\[\]]'
      scope: keyword.operator.atg

  parameters:
    - match: '<'
      push:
      - match: '>'
        pop: true
      - include: "Packages/C#/C#.sublime-syntax#constants"
      - include: "Packages/C#/C#.sublime-syntax#block"
      # from C#.sublime-syntax#parameters:
      - match: '\b(ref|params|out)?\s*\b([\w.\[\]]+)\s+(\w+)\s*(=)?'
        captures:
          1: storage.type.modifier.source.cs
          2: storage.type.generic.source.cs
          3: variable.parameter.function.source.cs
          4: keyword.operator.assignment.source.cs

  imports:
    # from top of C#.sublime-syntax#main:
    - match: '^\s*(using)\s+([^ ;]*);'
      scope: meta.keyword.using.source.cs
      captures:
        1: keyword.other.using.source.cs
